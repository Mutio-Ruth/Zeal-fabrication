@* 
@page "/contact"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<section class="contact-hero text-dark py-5">
    <div class="container text-center">
        <h1 class="fw-bold">Contact Us</h1>
        <p class="lead">Let's discuss your next fabrication or welding project</p>
    </div>
</section>

<section class="py-5">
    <div class="container">
        <div class="row">
            <div class="col-md-6 mb-4">
                <h4 class="fw-bold mb-4">Get in Touch</h4>

                <p class="mb-3">
                    <i class="bi bi-telephone-fill text-orange me-2"></i><strong>Phone</strong><br />
                    <a href="tel:+254721922909" class="text-decoration-none text-dark">+254 721 922 909</a>
                </p>
                <p class="mb-3">
                    <i class="bi bi-envelope-fill text-orange me-2"></i><strong>Email</strong><br />
                    <a href="mailto:info@fabweld.co.ke" class="text-decoration-none text-dark">info@fabweld.co.ke</a>
                </p>
                <p class="mb-3">
                    <i class="bi bi-clock-fill text-orange me-2"></i><strong>Working Hours</strong><br />
                    Monday - Friday: 8:00 AM - 5:00 PM<br />
                    Saturday: 8:00 AM - 1:00 PM
                </p>
            </div>

            <div class="col-md-6">
                <h4 class="fw-bold mb-4">Send Us a Message via WhatsApp</h4>

                <EditForm Model="@contactModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <InputText class="form-control" @bind-Value="contactModel.Name" placeholder="Name" />
                        <ValidationMessage For="@(() => contactModel.Name)" />
                    </div>

                    <div class="mb-3">
                        <InputText class="form-control" @bind-Value="contactModel.Email" placeholder="Email" />
                        <ValidationMessage For="@(() => contactModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <InputText class="form-control" @bind-Value="contactModel.Phone" placeholder="Phone (optional)" />
                    </div>

                    <div class="mb-3">
                        <InputTextArea class="form-control" @bind-Value="contactModel.Message" placeholder="Message" Rows="4" />
                        <ValidationMessage For="@(() => contactModel.Message)" />
                    </div>

                    <button type="submit" class="btn btn-success" disabled="@isSending">
                        @(isSending ? "Preparing WhatsApp..." : "Send via WhatsApp")
                    </button>
                </EditForm>

                @if (showToast)
                {
                    <div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100;">
                        <div class="toast show align-items-center text-white bg-success border-0" role="alert">
                            <div class="d-flex">
                                <div class="toast-body">
                                    ✅ WhatsApp opened successfully!
                                </div>
                                <button type="button" class="btn-close btn-close-white me-2 m-auto" @onclick="() => showToast = false"></button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private ContactModel contactModel = new();
    private bool showToast = false;
    private bool isSending = false;

    private async Task HandleValidSubmit()
    {
        isSending = true;
        StateHasChanged();

        var encodedMessage = Uri.EscapeDataString(
            $"Name: {contactModel.Name}\n" +
            $"Email: {contactModel.Email}\n" +
            $"Phone: {contactModel.Phone}\n" +
            $"Message: {contactModel.Message}");

        // Replace with your actual WhatsApp number (no + or spaces)
        var phoneNumber = "254790587967";
        var waLink = $"https://wa.me/{phoneNumber}?text={encodedMessage}";

        await JS.InvokeVoidAsync("open", waLink, "_blank");

        showToast = true;
        contactModel = new(); // Reset form
        isSending = false;
        StateHasChanged();

        await Task.Delay(5000);
        showToast = false;
        StateHasChanged();
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        public string Phone { get; set; } = "";

        [Required(ErrorMessage = "Message is required")]
        public string Message { get; set; } = "";
    }
}
 *@

@page "/contact"
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@inject IJSRuntime JS

<style>
    .contact-hero {
        background-color: orangered;
        border-bottom: 1px solid #ddd;
    }

    .contact-info i {
        color: #f97316; /* orange */
        margin-right: 0.5rem;
    }

    .form-control {
        border-radius: 0.5rem;
        border: 1px solid #ccc;
        padding: 0.75rem;
        font-size: 1rem;
    }

        .form-control:focus {
            border-color: #f97316;
            box-shadow: 0 0 0 0.2rem rgba(249, 115, 22, 0.25);
        }

    .btn-success {
        background-color: #198754;
        border-radius: 50px;
        padding: 0.6rem 2rem;
        font-weight: 500;
    }

        .btn-success:hover {
            background-color: #157347;
        }

    .toast-container {
        position: fixed;
        top: 1rem;
        right: 1rem;
        z-index: 1100;
    }
</style>

<!-- Hero Section -->
<section class="contact-hero text-dark py-5">
    <div class="container text-center">
        <h1 class="fw-bold">Contact Us</h1>
        <p class="lead">Let's discuss your next fabrication or welding project</p>
    </div>
</section>

<!-- Contact Section -->
<section class="py-5">
    <div class="container">
        <div class="row g-5">
            <!-- Contact Info -->
            <div class="col-md-6 contact-info">
                <h4 class="fw-bold mb-4">Get in Touch</h4>

                <p class="mb-3">
                    <i class="bi bi-telephone-fill me-2 text-warning"></i><strong>Phone</strong><br />
                    <a href="tel:+254748041852" class="text-decoration-none text-dark">
                        +254 748 041 852 / 0790 587 967
                    </a>
                </p>

                <p class="mb-3">
                    <i class="bi bi-envelope-fill me-2 text-warning"></i><strong>Email</strong><br />
                    <a href="mailto:info@zealfabrication.com" class="text-decoration-none text-dark">
                        info@zealfab.com
                    </a>
                </p>

                <p class="mb-3">
                    <i class="bi bi-clock-fill me-2 text-warning"></i><strong>Working Hours</strong><br />
                    Monday - Friday: 8:00 AM - 5:00 PM<br />
                    Saturday: 8:00 AM - 1:00 PM
                </p>
            </div>


            <!-- WhatsApp Form -->
            <div class="col-md-6">
                <h4 class="fw-bold mb-4">Send Us a Message via WhatsApp</h4>

                <EditForm Model="@contactModel" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="mb-3">
                        <InputText class="form-control" @bind-Value="contactModel.Name" placeholder="Full Name" />
                        <ValidationMessage For="@(() => contactModel.Name)" />
                    </div>

                    <div class="mb-3">
                        <InputText class="form-control" @bind-Value="contactModel.Email" placeholder="Email Address" />
                        <ValidationMessage For="@(() => contactModel.Email)" />
                    </div>

                    <div class="mb-3">
                        <InputText class="form-control" @bind-Value="contactModel.Phone" placeholder="Phone (optional)" />
                    </div>

                    <div class="mb-3">
                        <InputTextArea class="form-control" @bind-Value="contactModel.Message" placeholder="Your Message" Rows="4" />
                        <ValidationMessage For="@(() => contactModel.Message)" />
                    </div>

                    <button type="submit" class="btn btn-success w-100" disabled="@isSending">
                        @(isSending ? "Preparing WhatsApp..." : "Send via WhatsApp")
                    </button>
                </EditForm>

                @if (showToast)
                {
                    <div class="toast-container">
                        <div class="toast show text-white bg-success border-0 shadow-sm">
                            <div class="d-flex align-items-center justify-content-between px-3 py-2">
                                <span>✅ WhatsApp opened successfully!</span>
                                <button type="button" class="btn-close btn-close-white" @onclick="() => showToast = false"></button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@code {
    private ContactModel contactModel = new();
    private bool showToast = false;
    private bool isSending = false;

    private async Task HandleValidSubmit()
    {
        isSending = true;
        StateHasChanged();

        var encodedMessage = Uri.EscapeDataString(
            $"Name: {contactModel.Name}\n" +
            $"Email: {contactModel.Email}\n" +
            $"Phone: {contactModel.Phone}\n" +
            $"Message: {contactModel.Message}");

        var phoneNumber = "254790587967"; // your WhatsApp number
        var waLink = $"https://wa.me/{phoneNumber}?text={encodedMessage}";

        await JS.InvokeVoidAsync("open", waLink, "_blank");

        showToast = true;
        contactModel = new(); // reset form
        isSending = false;
        StateHasChanged();

        await Task.Delay(5000);
        showToast = false;
        StateHasChanged();
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Name is required")]
        public string Name { get; set; } = "";

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = "";

        public string Phone { get; set; } = "";

        [Required(ErrorMessage = "Message is required")]
        public string Message { get; set; } = "";
    }
}
